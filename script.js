'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputTemp = document.querySelector('.form__input--temp');
const inputClimb = document.querySelector('.form__input--climb');

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);
  clickNumber = 0;

  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance; // km
    this.duration = duration; // min
  }

  _setDescription() {
    this.type === 'running'
      ? (this.description = `–ü—Ä–æ–±—ñ–∂–∫–∞ ${new Intl.DateTimeFormat('ua-UA').format(
          this.date
        )}`)
      : (this.description = `–í–µ–ª–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ${new Intl.DateTimeFormat(
          'ua-UA'
        ).format(this.date)}`);
  }
}

class Running extends Workout {
  type = 'running';
  constructor(coords, distance, duration, temp) {
    super(coords, distance, duration);
    this.temp = temp;
    this.calculatePace();
    this._setDescription();
  }

  calculatePace() {
    // min/km
    this.pace = this.duration / this.distance;
  }
}

class Cycling extends Workout {
  type = 'cycling';
  constructor(coords, distance, duration, climb) {
    super(coords, distance, duration);
    this.climb = climb;
    this.calculateSpeed();
    this._setDescription();
  }

  calculateSpeed() {
    // km/h
    this.speed = this.distance / this.duration / 60;
  }
}

// const running = new Running([50,39],7,40,170);
// const cyling = new Cycling([50,39],37,80,70);
// console.log(running,cyling);

class App {
  #map;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this._getPosition();

    // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö–∏ –∑ localStorage
    this._getLocalStorageData();

    form.addEventListener('submit', this._newWorkout.bind(this)); // bind,–±–æ this –±–µ–∑ –Ω—å–æ–≥–æ –≤–∫–∞–∑—É—î –Ω–∞ —Ñ–æ—Ä–º—É,–∞ —Ç—Ä–µ–±–∞ —â–æ–± –≤–∫–∞–∑—É–≤–∞–≤ –Ω–∞ –æ–± —î–∫—Ç
    // –∑–º—ñ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–Ω–Ω—è —Ç–∏–ø—É –Ω–∞ –ø—Ä–æ–±—ñ–∂–∫—É/–≤–µ–ª–æ—Å–∏–ø–µ–¥
    inputType.addEventListener('change', this._toggleClimbField);

    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('–ù–µ –º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é');
        }
      );
    }
  }

  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(latitude);
    console.log(longitude);
    console.log(
      `https://www.google.com.ua/maps/@${latitude},${longitude},13z?entry=ttu`
    );

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // L.marker(coords)
    //   .addTo(this.#map)
    //   .bindPopup('A pretty CSS popup.<br> Easily customizable.')
    //   .openPopup();

    // –æ–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ
    this.#map.on('click', this._showForm.bind(this));

    // –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ localStorage
    this.#workouts.forEach(workout => {
      this._displayWorkout(workout);
    })
  }

  _showForm(e) {
    this.#mapEvent = e;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputTemp.value =
      inputClimb.value =
        '';
    form.classList.add('hidden');
  }

  _toggleClimbField() {
    inputClimb.closest('.form__row').classList.toggle('form__row--hidden');
    inputTemp.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    e.preventDefault(); // —â–æ–± –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    const areNumbers = (...numbers) =>
      numbers.every(num => Number.isFinite(num));

    const areNumbersPositive = (...numbers) => numbers.every(num => num > 0);

    // –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;

    // —è–∫—â–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ–±—ñ–∂–∫–æ—é-—Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–± —î–∫—Ç running
    if (type === 'running') {
      const temp = +inputTemp.value;
      // –ø—Ä–æ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(temp)
        !areNumbers(distance, duration, temp) ||
        !areNumbersPositive(distance, duration, temp)
      )
        return alert('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!');

      workout = new Running([lat, lng], distance, duration, temp);
    }

    // —è–∫—â–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤–µ–ª–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è-—Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–± —î–∫—Ç Cycling
    if (type === 'cycling') {
      const climb = +inputClimb.value;
      // –ø—Ä–æ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(climb)
        !areNumbers(distance, duration, climb) ||
        !areNumbersPositive(distance, duration)
      )
        return alert('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!');

      workout = new Cycling([lat, lng], distance, duration, climb);
    }
    // –¥–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –æ–± —î–∫—Ç –≤ –º–∞—Å–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    this.#workouts.push(workout);
    console.log(workout);
    console.log(this.#workouts);

    // –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ
    this._displayWorkout(workout);

    // –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É
    this._displayWorkoutOnSidebare(workout);

    // –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥–∞ –¥–∞–Ω–∏—Ö —ñ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
    this._hideForm();

    // –¥–æ–±–∞–≤–∏—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ localStorage
    this._addWorkoutToLocalStorage();
  }

  _displayWorkout(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .openPopup()
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'} ${workout.description}`
      );
  }

  _displayWorkoutOnSidebare(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
          <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">–∫–º</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">‚è±</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">—Ö–≤</span>
            </div>
          `;
    if (workout.type === 'running') {
      html += ` 
          <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value">${workout.pace.toFixed(2)}</span>
            <span class="workout__unit">–º/—Ö–≤</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üëü‚è±</span>
            <span class="workout__value">${workout.temp}</span>
            <span class="workout__unit">–∫—Ä–æ–∫/—Ö–≤</span>
          </div>
        </li>`;
    }
    if (workout.type === 'cycling') {
      html += ` <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value">${workout.speed.toFixed(2)}</span>
            <span class="workout__unit">–∫–º/–≥–æ–¥</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üèî</span>
            <span class="workout__value">${workout.climb}</span>
            <span class="workout__unit">–º</span>
          </div>
        </li>`;
    }
    form.insertAdjacentHTML('afterend', html);
  }
  _moveToWorkout(e) {
    const workoutElement = e.target.closest('.workout');
    console.log(workoutElement);

    if (!workoutElement) return;

    const workout = this.#workouts.find(
      item => item.id === workoutElement.dataset.id
    );

    this.#map.setView(workout.coords, 13, {
      animate: true,
      pan: {
        duration: 1,
      },
    });
  }
  _addWorkoutToLocalStorage() {
    localStorage.setItem('workouts',JSON.stringify(this.#workouts));
  }
  _getLocalStorageData() {
    const data = JSON.parse(localStorage.getItem('workouts'));

    if(!data) return;

    this.#workouts = data;

    this.#workouts.forEach(workout => {
      this._displayWorkoutOnSidebare(workout);
    })
  }

  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
}

const app = new App();
